{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA6DA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIAQ,SAASC,cAAc,SAC/BC,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAEN,MAAMC,EAAaC,SAASC,KAAKC,SAAShB,MAAMiB,OAC1CC,EAAYJ,SAASC,KAAKC,SAASG,KAAKF,OACxCG,EAASN,SAASC,KAAKC,SAASI,OAAOH,OAE7C,IAAK,IAAII,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAGhCvB,EAAcuB,EAFAR,GAAcQ,EAAI,GAAKH,GAGlCI,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA2B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,MAAU,IAEhEyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA2B,OAAOG,QAAQ,sBAAoB3B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\n//Resolvare exercitiu alt mod decat function createPromise(position, delay)\n/*let form = document.querySelector(\".form\");\nconsole.log(form)\n\nlet firstDelay = document.querySelector('label [name=\"delay\"]');\nlet valueFirstDelay = 0;\n\nlet stepDelay = document.querySelector('label [name=\"step\"]')\nlet valueStepDelay = 0;\n\nlet position = document.querySelector('label [name=\"amount\"]')\nlet valuePosition = 0;          \n\n\n\nlet counter = 1;\nlet todalDelay;\n\nlet a = () =>\n{\n  function x(){\n      return new Promise((resolve, reject)=>\n         {\n          const shouldResolve = Math.random();\n          if(shouldResolve > 0.5){resolve(`✅ Fulfilled promise ${counter} in ${todalDelay}ms. ${Math.ceil(shouldResolve*100)/100} `)}\n          else{reject(`❌ Rejected promise ${counter} in ${todalDelay}ms. ${Math.ceil(shouldResolve*100)/100} `)};\n         })\n              }\n\nx().then((value)=>{Notify.success(value)})\n   .catch((value)=>{Notify.failure(value)})\n\n}\n\nlet interval = () => setTimeout(()=>{let interval = setInterval(()=>\n  { a();\n    counter++;\n    todalDelay += valueStepDelay;\n    if (counter > valuePosition) {clearInterval(interval);}\n  }, valueStepDelay)}, valueFirstDelay)\n\n\n\n\nform.addEventListener(\"submit\", (event)=>\n                        {\n                          event.preventDefault();\n                          const{elements: {delay, step, amount}} = event.currentTarget;\n                          valueFirstDelay = parseInt(delay.value);\n                          valueStepDelay = parseInt(step.value);\n                          valuePosition = amount.value;\n                          interval();\n                          todalDelay = valueFirstDelay + valueStepDelay;\n                          \n                        }\n                      )\n*/\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const firstDelay = parseInt(this.elements.delay.value);\n  const delayStep = parseInt(this.elements.step.value);\n  const amount = parseInt(this.elements.amount.value);\n\n  for (let i = 1; i <= amount; i++) {\n    const delay = firstDelay + (i - 1) * delayStep;\n\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\n\n\n\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","firstDelay","parseInt","this","elements","value","delayStep","step","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.d72cc960.js.map"}